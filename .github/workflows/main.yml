name: CI – Build & Publish to GCR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Remplacez par l’ID de votre projet Google Cloud (tout en minuscules)
      GCP_PROJECT_ID: smiling-spring-462009-t0
      # La région de votre GCR, ex. us.gcr.io / eu.gcr.io / asia.gcr.io ou pour Artifact Registry :
      # REGION: europe-west1-docker.pkg.dev
      GCR_HOSTNAME: gcr.io

    steps:
      # 1. Récupérer le code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Installer Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # 3. (Optionnel) Configurer Docker pour GCR
      #    --> En fait, setup-gcloud exporte déjà les credentials dans Docker si 'export_default_credentials: true'
      #        mais si vous n’utilisez pas cette option, vous pouvez faire :
      # - name: Authenticate Docker to GCR
      #   run: |
      #     echo "${{ secrets.GCP_SA_KEY }}" > ${HOME}/gcloud-key.json
      #     gcloud auth activate-service-account --key-file=${HOME}/gcloud-key.json
      #     gcloud auth configure-docker ${GCR_HOSTNAME}

      # 5. Construire l’image Docker pour CONFIG-SERVER et la re‐tagger sous le formalisme GCR
      - name: Build & push Docker image CONFIG-SERVER to GCR
        run: |
          # Chemin relatif du Dockerfile
          cd config-server

          # Construire l’image locale (tag initial)
          docker build -t cyna-config-server:latest .

          # Re-taguer au format GCR : gcr.io/PROJECT_ID/IMAGE_NAME:TAG
          docker tag cyna-config-server:latest ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-config-server:latest

          # Pousser vers GCR
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-config-server:latest

      # 6. Faire de même pour les autres services...
      - name: Build & push Docker image EUREKA-SERVER to GCR
        run: |
          cd eureka-server
          docker build -t cyna-eureka-server:latest .
          docker tag cyna-eureka-server:latest ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-eureka-server:latest
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-eureka-server:latest

      - name: Build & push Docker image API-GATEWAY to GCR
        run: |
          cd api-gateway
          docker build -t cyna-api-gateway:latest .
          docker tag cyna-api-gateway:latest ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-api-gateway:latest
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-api-gateway:latest

      - name: Build & push Docker image AUTH-USERS to GCR
        run: |
          cd auth-users
          docker build -t cyna-auth-users:latest .
          docker tag cyna-auth-users:latest ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-auth-users:latest
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-auth-users:latest

      - name: Build & push Docker image PRODUCTS to GCR
        run: |
          cd products
          docker build -t cyna-products:latest .
          docker tag cyna-products:latest ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-products:latest
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-products:latest

      - name: Build & push Docker image SUBSCRIPTIONS to GCR
        run: |
          cd subscriptions
          docker build -t cyna-subscriptions:latest .
          docker tag cyna-subscriptions:latest ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-subscriptions:latest
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-subscriptions:latest
