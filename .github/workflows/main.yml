name: Build and Deploy to GCR (Debug Mode)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Variables d‚Äôenvironnement globales pour le job
env:
  # Remplacez par l‚ÄôID de votre projet GCP EXACT (toujours en minuscules)
  GCP_PROJECT_ID: "smiling-spring-462009"
  # Si vous voulez forcer une r√©gion, utilisez "eu.gcr.io" ou "us.gcr.io". Ici, on reste en multi-r√©gional :
  GCR_HOSTNAME: "gcr.io"
  # Pour afficher les logs Docker en ‚Äúlegacy‚Äù mode (mieux pour debugging)
  DOCKER_BUILDKIT: "0"

jobs:
  debug-and-deploy:
    runs-on: ubuntu-latest

    # Pour pouvoir utiliser google-github-actions/auth@v2 en mode Workload Identity (id-token)
    permissions:
      contents: read
      id-token: write

    steps:
      # 1. Checkout du d√©p√¥t
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      # 2. Affichage de l‚Äôenvironnement au d√©marrage (optionnel)
      - name: üîç Print all environment variables
        run: |
          echo "===== ENVIRONMENT VARIABLES ====="
          printenv | sort
          echo "================================="
      
      # 3. Authenticate to GCP via JSON Key (google-github-actions/auth@v2)
      - id: auth
        name: üîë Authenticate to Google Cloud (workload identity)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: access_token

      # 4. Installer et configurer le SDK gcloud (pour Docker ‚Üí GCR)
      - name: ‚òÅÔ∏è Set up Cloud SDK (gcloud)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          export_default_credentials: project_id

      # 5. V√©rification rapide que les variables critiques sont bien d√©finies
      - name: üõ†Ô∏è Verify critical env vars
        run: |
          set -euxo pipefail
          echo "GCP_PROJECT_ID = $GCP_PROJECT_ID"
          echo "GCR_HOSTNAME   = $GCR_HOSTNAME"
          echo "WORKSPACE      = $GITHUB_WORKSPACE"
          echo "ACTOR          = $GITHUB_ACTOR"
          echo "REPO           = $GITHUB_REPOSITORY"
          echo "Auth Token?    = '${{ steps.auth.outputs.auth_token }}' (cach√© partiellement)"

      # 8. Construire + Pousser CONFIG-SERVER
      - name: üê≥ Build & Push CONFIG-SERVER to GCR
        working-directory: ${{ github.workspace }}/config-server
        run: |
          set -euxo pipefail
          echo "üìÇ Working directory: $(pwd)"
          echo "--- Docker build CONFIG-SERVER (progress plain) ---"
          docker build --progress=plain -t cyna-config-server:latest .
          echo "--- Docker tag ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-config-server:latest ---"
          docker tag cyna-config-server:latest \
            ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-config-server:latest
          echo "--- Docker push ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-config-server:latest ---"
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-config-server:latest

      # 9. Construire + Pousser EUREKA-SERVER
      - name: üê≥ Build & Push EUREKA-SERVER to GCR
        working-directory: ${{ github.workspace }}/eureka-server
        run: |
          set -euxo pipefail
          echo "üìÇ Working directory: $(pwd)"
          echo "--- Docker build EUREKA-SERVER (progress plain) ---"
          docker build --progress=plain -t cyna-eureka-server:latest .
          echo "--- Docker tag ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-eureka-server:latest ---"
          docker tag cyna-eureka-server:latest \
            ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-eureka-server:latest
          echo "--- Docker push ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-eureka-server:latest ---"
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-eureka-server:latest

      # 10. Construire + Pousser API-GATEWAY
      - name: üê≥ Build & Push API-GATEWAY to GCR
        working-directory: ${{ github.workspace }}/api-gateway
        run: |
          set -euxo pipefail
          echo "üìÇ Working directory: $(pwd)"
          echo "--- Docker build API-GATEWAY (progress plain) ---"
          docker build --progress=plain -t cyna-api-gateway:latest .
          echo "--- Docker tag ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-api-gateway:latest ---"
          docker tag cyna-api-gateway:latest \
            ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-api-gateway:latest
          echo "--- Docker push ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-api-gateway:latest ---"
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-api-gateway:latest

      # 11. Construire + Pousser AUTH-USERS
      - name: üê≥ Build & Push AUTH-USERS to GCR
        working-directory: ${{ github.workspace }}/auth-users
        run: |
          set -euxo pipefail
          echo "üìÇ Working directory: $(pwd)"
          echo "--- Docker build AUTH-USERS (progress plain) ---"
          docker build --progress=plain -t cyna-auth-users:latest .
          echo "--- Docker tag ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-auth-users:latest ---"
          docker tag cyna-auth-users:latest \
            ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-auth-users:latest
          echo "--- Docker push ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-auth-users:latest ---"
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-auth-users:latest

      # 12. Construire + Pousser PRODUCTS
      - name: üê≥ Build & Push PRODUCTS to GCR
        working-directory: ${{ github.workspace }}/products
        run: |
          set -euxo pipefail
          echo "üìÇ Working directory: $(pwd)"
          echo "--- Docker build PRODUCTS (progress plain) ---"
          docker build --progress=plain -t cyna-products:latest .
          echo "--- Docker tag ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-products:latest ---"
          docker tag cyna-products:latest \
            ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-products:latest
          echo "--- Docker push ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-products:latest ---"
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-products:latest

      # 13. Construire + Pousser SUBSCRIPTIONS
      - name: üê≥ Build & Push SUBSCRIPTIONS to GCR
        working-directory: ${{ github.workspace }}/subscriptions
        run: |
          set -euxo pipefail
          echo "üìÇ Working directory: $(pwd)"
          echo "--- Docker build SUBSCRIPTIONS (progress plain) ---"
          docker build --progress=plain -t cyna-subscriptions:latest .
          echo "--- Docker tag ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-subscriptions:latest ---"
          docker tag cyna-subscriptions:latest \
            ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-subscriptions:latest
          echo "--- Docker push ‚Üí ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-subscriptions:latest ---"
          docker push ${GCR_HOSTNAME}/${GCP_PROJECT_ID}/cyna-subscriptions:latest

      # 14. (Optionnel) Printer l‚ÄôURL Cloud Run ou autre output
      - name: üöÄ Show deployment output (placeholder)
        run: |
          set -euxo pipefail
          # Si vous aviez un d√©ploiement Cloud Run, vous feriez :
          # echo "Cloud Run URL = ${{ steps.deploy.outputs.url }}"
          echo "‚úî Toutes les √©tapes Docker se sont termin√©es (mode debug)."
